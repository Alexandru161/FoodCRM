import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandObject, Filter
from dotenv import load_dotenv
import os
import httpx
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class Form(StatesGroup):
    waiting_for_comment = State()

user_current_client = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_allowed_user(user_id: int) -> bool:
    async with httpx.AsyncClient() as client:
        r = await client.get(f"{SUPABASE_URL}/rest/v1/allowed_users",
                             headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
                             params={"select": "telegram_id", "telegram_id": f"eq.{user_id}"})
        return len(r.json()) > 0 or user_id == ADMIN_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
async def get_next_client():
    async with httpx.AsyncClient() as client:
        r = await client.get(f"{SUPABASE_URL}/rest/v1/bot",
                             headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
                             params={"select": "*", "status": "eq.new", "order": "id"})
        data = r.json()
        return data[0] if data else None

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@router.message(Command("add_client"))
async def cmd_add_client(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split("\n")
    if len(parts) < 4:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add_client\n–ò–º—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ö–æ–º–ø–∞–Ω–∏—è\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        return
    _, name, phone, company, *comments = parts
    comments = "\n".join(comments)
    async with httpx.AsyncClient() as client:
        await client.post(f"{SUPABASE_URL}/rest/v1/bot",
                          headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}",
                                   "Content-Type": "application/json"},
                          json={"name": name, "phone": phone, "company": company, "comments": comments})
    await message.answer("–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

@router.message(Command("delete_client"))
async def cmd_delete_client(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /delete_client <id>")
        return
    client_id = parts[1]
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ID {client_id}, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /confirm_delete {client_id}")

@router.message(Command("confirm_delete"))
async def cmd_confirm_delete(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return
    client_id = message.text.split()[1]
    async with httpx.AsyncClient() as client:
        await client.delete(f"{SUPABASE_URL}/rest/v1/bot?id=eq.{client_id}",
                            headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"})
    await message.answer("–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")

@router.message(Command("all_clients"))
async def cmd_all_clients(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    async with httpx.AsyncClient() as client:
        r = await client.get(f"{SUPABASE_URL}/rest/v1/bot",
                             headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
                             params={"select": "id,name,phone,status"})
        clients = r.json()
        text = "\n".join([f"{c['id']}: {c['name']} | {c['phone']} | {c['status']}" for c in clients])
        await message.answer(text or "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")

@router.message(Command("set_status"))
async def cmd_set_status(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_status <id> <new|no_answer|not_interested|interested>")
        return
    client_id, status = parts[1], parts[2]
    if status not in ("new", "no_answer", "not_interested", "interested"):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å")
        return
    async with httpx.AsyncClient() as client:
        await client.patch(f"{SUPABASE_URL}/rest/v1/bot?id=eq.{client_id}",
                           headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
                           json={"status": status})
    await message.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /next
@router.message(Command("next"))
async def send_next_client(message: Message, state: FSMContext):
    if not await is_allowed_user(message.from_user.id):
        return
    client = await get_next_client()
    if not client:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç.")
        return
    user_current_client[message.from_user.id] = client["id"]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞", callback_data="no_answer")],
        [InlineKeyboardButton(text="‚ùå –ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="not_interested")],
        [InlineKeyboardButton(text="‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", callback_data="interested")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment")]
    ])
    text = f"<b>{client['name']}</b>\nüìû {client['phone']}\nüè¢ {client['company']}\nüí¨ {client.get('comments','')}"
    await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.in_({"no_answer", "not_interested", "interested"}))
async def handle_status(callback: CallbackQuery, state: FSMContext):
    client_id = user_current_client.get(callback.from_user.id)
    if not client_id:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /next")
        return

    new_status = callback.data
    async with httpx.AsyncClient() as client:
        await client.patch(
            f"{SUPABASE_URL}/rest/v1/bot?id=eq.{client_id}",
            headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
            json={"status": new_status}
        )

        if new_status == "interested":
            r = await client.get(
                f"{SUPABASE_URL}/rest/v1/bot?id=eq.{client_id}&select=id,name,phone,company,comments",
                headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"}
            )
            if r.status_code == 200 and r.json():
                client_data = r.json()[0]
                full_info = (
                    f"üëÄ <b>–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</b> –æ—Ç {callback.from_user.full_name}\n"
                    f"ID –∫–ª–∏–µ–Ω—Ç–∞: <code>{client_data['id']}</code>\n"
                    f"<b>{client_data['name']}</b>\n\n"
                    f"üìû {client_data['phone']}\n\n"
                    f"üè¢ {client_data['company']}\n\n"
                    f"üí¨ {client_data.get('comments', '-')}"
                )
                await bot.send_message(ADMIN_ID, full_info)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É —Å –∫–æ–º–∞–Ω–¥–æ–π /next
    await callback.message.answer("–î–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /next")




@router.callback_query(F.data == "comment")
async def start_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_comment)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await callback.answer()

@router.message(Form.waiting_for_comment)
async def save_comment(message: Message, state: FSMContext):
    client_id = user_current_client.get(message.from_user.id)
    if not client_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /next")
        return
    async with httpx.AsyncClient() as client:
        await client.patch(f"{SUPABASE_URL}/rest/v1/bot?id=eq.{client_id}",
                           headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"},
                           json={"comments": message.text})
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
